<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2010-2016 Evolveum
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<xsd:schema targetNamespace="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:tns="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:a="http://prism.evolveum.com/xml/ns/public/annotation-3"
            xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3"
            xmlns:t="http://prism.evolveum.com/xml/ns/public/types-3"
            xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
            elementFormDefault="qualified"
            xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
            jaxb:extensionBindingPrefixes="xjc"
            jaxb:version="2.0">

    <xsd:annotation>
        <xsd:documentation>
            TODO
        </xsd:documentation>
    </xsd:annotation>

    <!-- Don't provide schemaLocation here, as it causes xjc to really contact the URIs (!) -->
    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/annotation-3"/>
    <xsd:import namespace="http://prism.evolveum.com/xml/ns/public/types-3"/>

    <xsd:include schemaLocation="http://midpoint.evolveum.com/xml/ns/public/common/common-core-3" />

	<xsd:complexType name="ApprovalSchemaType">
		<xsd:annotation>
			<xsd:documentation>
				Rules for approving something (e.g. assignment of a role to a user).
				Specifies the structure of approvers and their relations.
			</xsd:documentation>
			<xsd:appinfo>
				<a:container/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="name" type="xsd:string" minOccurs="0"/>
			<xsd:element name="description" type="xsd:string" minOccurs="0"/>
			<xsd:element name="level" type="c:ApprovalLevelType" minOccurs="1" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						Levels, or stages, of the approval process.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="ApprovalLevelType">
		<xsd:annotation>
			<xsd:documentation>
				One "level" (or stage) in the approval process.
			</xsd:documentation>
			<xsd:appinfo>
				<a:container/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="order" type="xsd:int" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Order of this approval level. (Marked as optional only to ensure backward compatibility. Will change to 'required' eventually.)
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="name" type="xsd:string" minOccurs="0"/>
			<xsd:element name="displayName" type="xsd:string" minOccurs="0"/>
			<xsd:element name="description" type="xsd:string" minOccurs="0"/>
			<xsd:element name="approverRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						Instruction to approve something, by a user (if this points to a User object) or
						by someone from a group of users (if this points to a Org object; representing
						all users that belong to that organization).
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="approverRelation" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						<p>
							What relation(s) to use when determining approvers? E.g. "approver", "owner",
							"securityApprover", and so on.
						</p>
					</xsd:documentation>
					<xsd:appinfo>
						<a:since>3.5</a:since>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="approverExpression" type="c:ExpressionType" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						Dynamically specifies approver(s). If specified, the expression(s) are evaluated and the result
						is used as a set of approvers (UserType, OrgType, RoleType, or any combination of them).
						May be used with approverRef element(s).
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="evaluationStrategy" type="c:LevelEvaluationStrategyType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Must all approvers at this level approve the thing (allMustApprove),
						or first decision is taken as authoritative (firstDecides)?
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="outcomeIfNoApprovers" type="c:ApprovalLevelOutcomeType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						What is the outcome (of this level) if there are no approvers? E.g. there are no users that have
						been assigned a role as an approver; or a user has no managers, etc.
					</xsd:documentation>
					<xsd:appinfo>
						<a:since>3.6</a:since>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="groupExpansion" type="c:GroupExpansionType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						How should be "groups" (orgs, roles) expanded? Default is "byClaimingWorkItem", i.e. they are not
						expanded at all - their members can claim corresponding work items.
					</xsd:documentation>
					<xsd:appinfo>
						<a:since>3.6</a:since>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="formRef" type="c:ObjectReferenceType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Form to be displayed e.g. to present or request additional information.
						EXPERIMENTAL
					</xsd:documentation>
					<xsd:appinfo>
						<a:since>3.6</a:since>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<!-- TODO some hooks to allow ad-hoc customizations like making a form field obligatory or optional depending on the stage etc. -->
			<xsd:element name="additionalInformation" type="c:ExpressionType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Additional information for approver. Will be displayed when work item will be worked on.
					</xsd:documentation>
					<xsd:appinfo>
						<a:since>3.6</a:since>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="automaticallyApproved" type="c:ExpressionType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Condition specifying when this level is automatically approved (e.g. "user is
						from Board of Directors"). This is an expression that should yield a boolean value.

						DEPRECATED. Use automaticallyCompleted instead.
					</xsd:documentation>
					<xsd:appinfo>
						<a:deprecated>true</a:deprecated>
						<a:deprecatedSince>3.6</a:deprecatedSince>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="automaticallyCompleted" type="c:ExpressionType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Expression specifying that this level should be automatically processed (approved, rejected, skipped).
						If the expression returns null, standard processing by human actors is carried out.
					</xsd:documentation>
					<xsd:appinfo>
						<a:since>3.6</a:since>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="duration" type="xsd:duration" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Duration of work items created at this level.
						TODO other time units, like business days?
					</xsd:documentation>
					<xsd:appinfo>
						<a:since>3.6</a:since>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="timedActions" type="tns:WorkItemTimedActionsType" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						What actions are to be applied to work items when given timer(s) occur.
						EXPERIMENTAL
					</xsd:documentation>
					<xsd:appinfo>
						<a:since>3.6</a:since>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="WorkItemTimedActionsType">
		<xsd:annotation>
			<xsd:documentation>
				Actions that should be applied to a work item in given moments (relative to work item creation
				or work item deadline).
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
				<a:container/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="name" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Name given to this "timed actions" entry.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="displayName" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Display name given to this "timed actions" entry.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="description" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Description of this "timed actions" entry.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="time" type="tns:WfTimeSpecificationType" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						Time(s) at which these actions are to be executed. No time or zero time means they are executed
						at the work item deadline.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="actions" type="tns:WorkItemActionsType" minOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						What actions to execute.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="condition" type="tns:ExpressionType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Should these actions be scheduled?
						NOT IMPLEMENTED YET.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="escalationLevelFrom" type="xsd:int" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Apply only if current escalation level is greater or equal to this value.
						If both escalationLevelFrom and escalationLevelTo are missing, they are considered both to be 0.
						If only escalationLevelFrom is missing, it is considered 0 (i.e. no restriction).
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="escalationLevelTo" type="xsd:int" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Apply only if current escalation level is not greater than this value.
						If both escalationLevelFrom and escalationLevelTo are missing, they are considered both to be 0.
						If only escalationLevelTo is missing, it is considered "infinity" (i.e. no restriction).
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="WorkItemActionsType">
		<xsd:annotation>
			<xsd:documentation>
				Actions to execute.
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
				<a:container/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="complete" type="tns:CompleteWorkItemActionType" minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						Complete this work item with a given result.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<!-- TODO maybe also completeLevel -->
			<xsd:element name="notify" type="tns:WorkItemNotificationActionType" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						Send a notification.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="delegate" type="tns:DelegateWorkItemActionType" minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						Delegate this work item.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="escalate" type="tns:EscalateWorkItemActionType" minOccurs="0" maxOccurs="1">
				<xsd:annotation>
					<xsd:documentation>
						Escalate this work item. Basically the same as "delegate" but increases the escalation level.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="AbstractWorkItemActionType">
		<xsd:annotation>
			<xsd:documentation>
				TODO
				EXPERIMENTAL
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
				<a:container/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="name" type="xsd:string" minOccurs="0"/>
			<xsd:element name="displayName" type="xsd:string" minOccurs="0"/>
			<xsd:element name="description" type="xsd:string" minOccurs="0"/>
			<xsd:element name="condition" type="tns:ExpressionType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Should this action be executed?
						NOT IMPLEMENTED YET
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="CompleteWorkItemActionType">
		<xsd:annotation>
			<xsd:documentation>
				TODO
				EXPERIMENTAL
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
				<a:container/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tns:AbstractWorkItemActionType">
				<xsd:sequence>
					<xsd:element name="outcome" type="tns:WorkItemOutcomeType" minOccurs="0" />
					<xsd:element name="notifyBeforeAction" type="xsd:duration" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								If specified, sends a standard "action to be executed" notifications at given times.
								(Unlike in timed action interval, here a positive time must be specified: just like for
								notifyBeforeDeadline in certification.)
								TODO other time units, like business days?
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="WorkItemNotificationActionType">
		<xsd:annotation>
			<xsd:documentation>
				TODO
				EXPERIMENTAL
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
				<a:container/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tns:AbstractWorkItemActionType">
				<xsd:sequence>
					<xsd:element name="perAssignee" type="xsd:boolean" minOccurs="0" >
						<xsd:annotation>
							<xsd:documentation>
								If true (the default) creates one notification event for each assignee. Otherwise,
								creates a single notification event for the whole work item.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="handler" type="c:EventHandlerType" minOccurs="0" >
						<xsd:annotation>
							<xsd:documentation>
								Ad-hoc event handler that will be used to process these event emitted. In addition to it,
								a system-wide handler for workItemCustomEvent will be invoked.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="DelegateWorkItemActionType">
		<xsd:annotation>
			<xsd:documentation>
				TODO
				EXPERIMENTAL
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
				<a:container/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tns:AbstractWorkItemActionType">
				<xsd:sequence>
					<xsd:element name="approverRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								Specific approver to replace the current one.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="approverRelation" type="xsd:QName" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								<p>
									What relation(s) to use when determining approvers? E.g. "approver", "owner",
									"securityApprover", and so on.
									NOT SUPPORTED YET.
								</p>
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="approverExpression" type="c:ExpressionType" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								Expression giving an approver to replace the current one.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<!-- Evaluation strategy is always "first decides", because we don't create new work items.
					     So whoever decides first, closes this work item. -->
					<xsd:element name="outcomeIfNoApprovers" type="c:WorkItemOutcomeType" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								What is the outcome (of this work item) if there is no approver to delegate/escalate to?
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<!-- TODO group expansion. But we currently don't manipulate with candidate users/groups, so it's
					     not possible to delegate to roles now. -->
					<!-- "automaticallyApproved" is not supported yet. Can be simulated with approverExpression
					     + outcomeIfNoApprovers. -->
					<xsd:element name="duration" type="xsd:duration" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Duration of the work item after delegation. If not specified, the deadline of the work item
								is not changed (this is meaningful only if the delegation occurs before the original deadline).
								TODO other time units, like business days?
								TODO relative to original start time, original deadline, or current time?
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="delegationMethod" type="tns:WorkItemDelegationMethodType" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								How to delegate the work item? Default is "replace assignees".
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="notifyBeforeAction" type="xsd:duration" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>
								If specified, sends a standard "action to be executed" notifications at given times.
								(Unlike in timed action interval, here a positive time must be specified: just like for
								notifyBeforeDeadline in certification.)
								TODO other time units, like business days?
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="EscalateWorkItemActionType">
		<xsd:annotation>
			<xsd:documentation>
				TODO
				EXPERIMENTAL
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
				<a:container/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tns:DelegateWorkItemActionType">
				<xsd:sequence>
					<xsd:element name="escalationLevelName" type="xsd:string" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Name for the new escalation level.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="escalationLevelDisplayName" type="xsd:string" minOccurs="0" >
						<xsd:annotation>
							<xsd:documentation>
								Display name for the new escalation level.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:simpleType name="WorkItemDelegationMethodType">
		<xsd:annotation>
			<xsd:documentation>
				How the delegation should be realized.
			</xsd:documentation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="addAssignees">
				<xsd:annotation>
					<xsd:documentation>
						Delegate(s) should be added as new assignees, keeping original assignees and original candidates.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="ADD_ASSIGNEES"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="replaceAssignees">
				<xsd:annotation>
					<xsd:documentation>
						Delegate(s) should replace existing assignee(s). Candidates are removed.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="REPLACE_ASSIGNEES"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<!-- TODO something like "replaceCurrentAssignee" ? -->
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="ApprovalLevelOutcomeType">
		<xsd:annotation>
			<xsd:documentation>
				Result (outcome) of an approval process level.
			</xsd:documentation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="approve">
				<xsd:annotation>
					<xsd:documentation>
						Operation was approved at this level. The approval process will continue at the next level.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="APPROVE"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="reject">
				<xsd:annotation>
					<xsd:documentation>
						Operation was rejected at this level. The approval process will stop.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="REJECT"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="skip">
				<xsd:annotation>
					<xsd:documentation>
						This level is silently skipped. This is useful for situations where we don't even want to start
						an approval process if there are no approvers in it.

						Skipping whole approval process is currently supported only partly: when using approver relations.
						For approver expressions, these are always evaluated within context of a workflow process.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="SKIP"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="WorkItemResultType">
		<xsd:annotation>
			<xsd:documentation>
				Overall output from a work item: outcome (approve/reject/...), comment, additional delta,
				and probably other things in the future.

				TODO devise an extension mechanism for this
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="outcome" type="tns:WorkItemOutcomeType" minOccurs="0" />
			<xsd:element name="outcomeAsString" type="xsd:string" minOccurs="0" />
			<xsd:element name="comment" type="xsd:string" minOccurs="0" />
			<xsd:element name="additionalDeltas" type="tns:ObjectTreeDeltasType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Additional delta(s) resulting from this action.
						Typically if the user filled-in some information into
						custom form.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:simpleType name="WorkItemOutcomeType">
		<xsd:annotation>
			<xsd:documentation>
				Result (outcome) of a work item.
			</xsd:documentation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="approve">
				<xsd:annotation>
					<xsd:documentation>
						TODO
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="APPROVE"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="reject">
				<xsd:annotation>
					<xsd:documentation>
						TODO
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="REJECT"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<!-- TODO something like CANCEL i.e. canceled work item without providing any answer
				 (e.g. when replacing it with a set of other work items) -->
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="GroupExpansionType">
		<xsd:annotation>
			<xsd:documentation>
				How should be "groups" (orgs, roles) expanded?
			</xsd:documentation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="byClaimingWorkItem">
				<xsd:annotation>
					<xsd:documentation>
						Groups are not expanded at all - their members can claim corresponding work items.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="BY_CLAIMING_WORK_ITEMS"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="onWorkItemCreation">
				<xsd:annotation>
					<xsd:documentation>
						Groups are expanded on work item creation. One work item is created for each member of given org/role.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="ON_WORK_ITEM_CREATION"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="LevelEvaluationStrategyType">
		<xsd:annotation>
			<xsd:documentation>
				Enumeration of approval strategies at a particular level.
			</xsd:documentation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="allMustApprove">
				<xsd:annotation>
					<xsd:documentation>
						All approvers at a particular level must approve the operation.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="ALL_MUST_AGREE"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="firstDecides">
				<xsd:annotation>
					<xsd:documentation>
						First approver that votes will decide the whole level (either by approving or by rejecting).
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="FIRST_DECIDES"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="WfConfigurationType">
        <xsd:annotation>
            <xsd:documentation>
                Configuration for workflows - for those parts not stored in the system config file.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="modelHookEnabled" minOccurs="0" type="xsd:boolean" default="true">
                <xsd:annotation>
                    <xsd:documentation>
                        This property controls the workflow model hook - i.e. whether each request going
                        through the model subsystem should be processed by the workflow hook. So, if disabled,
                        all requests are executed immediately, without being processed by workflows.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="processCheckInterval" minOccurs="0" type="xsd:int" default="10">
                <xsd:annotation>
                    <xsd:documentation>
                        For "dumb" wf processes, which require active shadowing tasks, sets the process
                        instance check interval (in seconds).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="allowCompleteOthersItems" minOccurs="0" type="xsd:boolean" default="true">
                <xsd:annotation>
                    <xsd:documentation>
                        Whether appropriately privileged users (e.g. the administrator) can approve/reject work items
                        assigned to other users.
                        DEPRECATED. Use authorizations to limit ability to approve/reject arbitrary work items.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:deprecatedSince>3.5</a:deprecatedSince>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="useLegacyApproversSpecification" minOccurs="0" type="tns:LegacyApproversSpecificationUsageType">
                <xsd:annotation>
                    <xsd:documentation>
                        How to deal with legacy approvers specifications, i.e. approvalRef, approvalExpression, approvalSchema,
                        automaticallyApproved items in AbstractRoleType? The default is "ifNoExplicitApprovalPolicyAction", that
                        means these items are applied only if no explicit approval policy action is encountered.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="useDefaultApprovalPolicyRules" minOccurs="0" type="tns:DefaultApprovalPolicyRulesUsageType">
                <xsd:annotation>
                    <xsd:documentation>
                        Whether to use default approval policy rules. The default is "ifNoApprovalPolicyAction", that means
                        these rules are applied only if no other approval policy action is encountered.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="primaryChangeProcessor" minOccurs="0" type="tns:PrimaryChangeProcessorConfigurationType" />
            <xsd:element name="generalChangeProcessor" minOccurs="0" type="tns:GeneralChangeProcessorConfigurationType" />
        </xsd:sequence>
    </xsd:complexType>

    <xsd:simpleType name="LegacyApproversSpecificationUsageType">
        <xsd:annotation>
            <xsd:documentation>
                How to deal with legacy approvers specifications, i.e. approvalRef, approvalExpression, approvalSchema,
                automaticallyApproved items in AbstractRoleType?
            </xsd:documentation>
            <xsd:appinfo>
                <jaxb:typesafeEnumClass/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="never">
                <xsd:annotation>
                    <xsd:documentation>
                        The legacy approvers specification is never used.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="NEVER"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="always">
                <xsd:annotation>
                    <xsd:documentation>
                        The legacy approvers specification is always used. It is used before any other (policy-based) approval actions.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="ALWAYS"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="ifNoExplicitApprovalPolicyAction">
                <xsd:annotation>
                    <xsd:documentation>
                        The legacy approvers specification is used if there's no explicit approval policy applicable to a given
                        target.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="IF_NO_EXPLICIT_APPROVAL_POLICY_ACTION"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="DefaultApprovalPolicyRulesUsageType">
        <xsd:annotation>
            <xsd:documentation>
                Whether to use default approval policy rules.
            </xsd:documentation>
            <xsd:appinfo>
                <jaxb:typesafeEnumClass/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="never">
                <xsd:annotation>
                    <xsd:documentation>
                        Default approval policy rules are never used.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="NEVER"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="ifNoApprovalPolicyAction">
                <xsd:annotation>
                    <xsd:documentation>
                        Default approval policy rules are used if there are no applicable approval policy actions.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <jaxb:typesafeEnumMember name="IF_NO_APPROVAL_POLICY_ACTION"/>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:enumeration>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="WfChangeProcessorConfigurationType">
        <xsd:annotation>
            <xsd:documentation>
                Configuration for workflow change processor.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="enabled" minOccurs="0" type="xsd:boolean" default="true"/>
            <xsd:element name="order" minOccurs="0" type="xsd:int">
                <xsd:annotation>
                    <xsd:documentation>
                        Order in which the change processor should be invoked. (Unspecified means "at the end".)
                        NOT IMPLEMENTED YET.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="GeneralChangeProcessorConfigurationType">
        <xsd:annotation>
            <xsd:documentation>
                Configuration for GeneralChangeProcessor.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:WfChangeProcessorConfigurationType">
                <xsd:sequence>
                    <xsd:element name="scenario" minOccurs="0" maxOccurs="unbounded" type="tns:GeneralChangeProcessorScenarioType" />
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="GeneralChangeProcessorScenarioType">
        <xsd:annotation>
            <xsd:documentation>
                A scenario for GeneralChangeProcessor.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="enabled" minOccurs="0" type="xsd:boolean" default="true">
                <xsd:annotation>
                    <xsd:documentation>
                        Is this scenario enabled?
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="name" minOccurs="0" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        A human-readable name of the scenario (e.g. "Approving assignments of roles R1001-R1999 to users in XYZ organization").
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="activationCondition" minOccurs="0" type="c:ExpressionType">
                <xsd:annotation>
                    <xsd:documentation>
                        A condition controlling whether this scenario applies, i.e. whether a defined approval process should be started.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="processName" minOccurs="1" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        A name of the approval process. When the above condition is met, this process is started. It has to evaluate the situation,
                        seek user's (or users') approval(s), modifying the situation if necessary.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="beanName" minOccurs="0" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        The name of the Spring bean used for customizations. It provides e.g. a method for externalizing process state,
                        a method for providing work item contents, and so on.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>

        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="PrimaryChangeProcessorConfigurationType">
        <xsd:annotation>
            <xsd:documentation>
                Configuration for PrimaryChangeProcessor.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:WfChangeProcessorConfigurationType">
                <xsd:sequence>
                    <xsd:element name="policyRuleBasedAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="addUserAbstractRoleAssignmentAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="modifyUserAbstractRoleAssignmentAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="addUserResourceAssignmentAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="modifyUserResourceAssignmentAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="addAbstractRoleAbstractRoleAssignmentAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="modifyAbstractRoleAbstractRoleAssignmentAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="addAbstractRoleResourceAssignmentAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="modifyAbstractRoleResourceAssignmentAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="addAbstractRoleAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="modifyAbstractRoleAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="addUserAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="modifyUserAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="addResourceAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="modifyResourceAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="addAssociationAspect" type="tns:PcpAspectConfigurationType" minOccurs="0" />
                    <xsd:element name="otherAspect" type="tns:GenericPcpAspectConfigurationType" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="PcpAspectConfigurationType">
        <xsd:annotation>
            <xsd:documentation>
                Configuration for a primary change processor aspect.

                Some aspects do not require any configuration - for example, role and resource assignment ones.
                They take all the approver information directly from the object (role or resource) being assigned.
                However, there are some others (namely, role/resource/user/whatever add/modify aspects) that need
                the explicit information about approver(s) in order to know where to route the request.

                For the former aspects, the approver information specified here takes precedence over
                approver information derived from the objects being used (e.g. role or resource).
                More specifically, if any approver information is here, no approver information is
                taken from the objects. This could be changed (e.g. by allowing to tune this behavior)
                in the future.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="enabled" minOccurs="0" maxOccurs="1" type="xsd:boolean">
                <xsd:annotation>
                    <xsd:documentation>
                        Whether the aspect is enabled or not.
                        If not specified (but if aspect configuration is present), it is assumed to be true.
                        However, if the whole aspect configuration is absent, only aspects marked as "enabled-by-default" are enabled.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="approverRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Approvers for this aspect. The approver is a person (or group) that approves carrying out
                        action(s) relevant to this aspect. This reference may point to object of type UserType of OrgType.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="approverExpression" type="c:ExpressionType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Approvers for this aspect. If specified, the expression(s) are evaluated and the result
                        is used as a set of approvers (UserType, OrgType, or any combination of them).
                        May be used with approverRef element(s).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="approvalSchema" type="c:ApprovalSchemaType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        More complex (multi-level) approval schema. If used, it overrides both
                        approverRef and approverExpression elements.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="approvalProcess" type="xsd:string" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Name of custom approval process. If used, it overrides
                        approverRef, approverExpression, and approvalSchema elements.

                        For explicitness, only one of approverRef(s)/approverExpression(s),
                        approvalSchema and approvalProcess should be specified.

                        THIS PROPERTY (approvalProcess) IS NOT SUPPORTED YET.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="automaticallyApproved" type="c:ExpressionType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Condition specifying when the item is automatically approved (e.g. "user is
                        from Board of Directors"). This is an expression that should yield a boolean value.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="applicabilityCondition" type="c:ExpressionType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Condition specifying if the workflow should be started in the first place.
                        This is an expression that should yield a boolean value. It gets 'itemToApprove' parameter
                        that contains item to be approved - it is aspect-specific: might be e.g. an assignment,
                        an association + resource shadow discriminator, etc.

                        The difference between applicabilityCondition and automaticallyApproved is that if the
                        former yields false, workflow is not even started. If it yields true, workflow is started,
                        and then 'automaticallyApproved' is evaluated. If it yields false, manual approval is
                        required. If true, item is automatically approved.

                        CURRENTLY IMPLEMENTED ONLY IN AddAssociationAspect.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="GenericPcpAspectConfigurationType">
        <xsd:annotation>
            <xsd:documentation>
                A generic configuration for a wf aspect.

                It is meant for non-standard aspects. (Standard aspects use named properties in
                PrimaryChangeProcessorConfigurationType container.)
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:PcpAspectConfigurationType">
                <xsd:sequence>
                    <xsd:element name="name" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Name of the aspect bean.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="AssociationAdditionType">
        <xsd:annotation>
            <xsd:documentation>
                Container for association-to-be-added in the context: resource shadow discriminator.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="association" type="tns:ShadowAssociationType">
                <xsd:annotation>
                    <xsd:documentation>
                        Association to be added.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="resourceShadowDiscriminator" type="tns:ShadowDiscriminatorType">
                <xsd:annotation>
                    <xsd:documentation>
                        To which resource/kind/intent to add it.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="associationAddition" type="tns:AssociationAdditionType"/>

    <xsd:complexType name="WfContextType">
        <xsd:annotation>
            <xsd:documentation>
                Workflow context of the operation that is to be executed.
                Points to a process instance in a workflow engine, and to an externalized view
                of its state.

                Beware, some attributes like process state or work items may not be always present.
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="processInstanceId" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        Internal identifier of a process instance, assigned by the underlying workflow engine
                        (currently Activiti).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="processName" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        Name of the process definition, e.g. "ItemApproval".
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="processInstanceName" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        Name of the process instance. It is defined by the code that starts
                        the process instance and should describe the purpose of the process
                        instance as precisely as possible. An example: "Approving adding Webmaster to JoeDoe".
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="startTimestamp" type="xsd:dateTime" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Time when this process instance started.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="endTimestamp" type="xsd:dateTime" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Time when this process instance finished (if it did).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="requesterRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        User who requested the respective operation was carried out. Stored in repository.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>c:UserType</a:objectReferenceTargetType>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="objectRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Object whose modification is to be approved. (Normally the same as task.objectRef but there can be differences
                        in cases when the object is only to be created.) TODO - think this through.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="targetRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Target of assignment/association/etc that is to be approved.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="approvedByRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        User(s) who approved current operation. Stored in repository.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>c:UserType</a:objectReferenceTargetType>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="rootTaskRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        This property is put into model task (i.e. not wf root task). It points to the
                        wf root task - that's important e.g. in cases when wf root task is not a subtask
                        of the model task.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>c:TaskType</a:objectReferenceTargetType>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="state" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Value of process variable "wfState" that should describe current state of
                        the process instance (e.g. "Request was approved by Engineering, passed now to
                        the Management Group").
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="stageNumber" type="xsd:int" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Stage number - if process can be conceptually divided into stages. Starts at 1.
                        Null if not applicable. (Stored in process variable "stageNumber".)
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="stageCount" type="xsd:int" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Total number of stages - if process can be conceptually divided into stages.
                        Null if not known or applicable. (Stored in process variable "stageCount".)
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="stageName" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Stage name - if process can be conceptually divided into stages.
						(Stored in process variable "stageName".)
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="stageDisplayName" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Stage display name - if process can be conceptually divided into stages.
						(Stored in process variable "stageDisplayName".)
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="approved" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        True if the result is APPROVED. False if REJECTED. Null if the result is not yet
                        known or if it something other than APPROVED or REJECTED ("answer" property
                        has to be set in such case).
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="answer" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Value of process variable "wfAnswer" that should describe overall outcome
                        of the process instance.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="changeProcessor" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Contains name of class that manages this particular model operation ("change", thus "change processor").
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="processInterface" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Contains name of class that provides an interface between wf process and midPoint ("process interface bean").
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="processorSpecificState" type="tns:WfProcessorSpecificStateType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        State that is specific to a given change processor.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="processSpecificState" type="tns:WfProcessSpecificStateType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        State that is specific to a given BPMN process.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="event" type="tns:WfProcessEventType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Events that occurred during lifetime of this process instance.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="workItem" type="tns:WorkItemType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Currently open work items for this process.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="wfContextType" type="tns:WfContextType" />

	<xsd:complexType name="WfProcessEventType">
		<xsd:annotation>
			<xsd:documentation>
				Any event occurring during process instance execution that needs to be recorded, e.g. a decision
				done by a user.
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="timestamp" type="xsd:dateTime">
				<xsd:annotation>
					<xsd:documentation>
						Time in which the event occurred.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="initiatorRef" type="c:ObjectReferenceType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						User who initiated this action. (Typically, a user who made a decision.)
						Might be null if unknown.
					</xsd:documentation>
					<xsd:appinfo>
						<a:objectReferenceTargetType>tns:UserType</a:objectReferenceTargetType>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="stageNumber" type="xsd:int" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Number of the stage at which this event occurred (if process can be conceptually divided into stages).
						Starts at 1. Null if not applicable.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="stageName" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Name of the stage at which this event occurred (if process can be conceptually divided into stages).
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="stageDisplayName" type="xsd:string" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>
						Display name of the stage at which this event occurred was made (if process can be conceptually divided into stages).
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="WorkItemEventCauseInformationType">
		<xsd:annotation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="type" type="tns:WorkItemEventCauseTypeType" minOccurs="0" />
			<xsd:element name="name" type="xsd:string" minOccurs="0" />
			<xsd:element name="displayName" type="xsd:string" minOccurs="0" />
		</xsd:sequence>
	</xsd:complexType>

	<xsd:simpleType name="WorkItemEventCauseTypeType">
		<xsd:annotation>
			<xsd:documentation>
				Type of event cause.
			</xsd:documentation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="userAction">
				<xsd:annotation>
					<xsd:documentation>
						This event was caused by a user action.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="USER_ACTION"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="timedAction">
				<xsd:annotation>
					<xsd:documentation>
						This event was caused by a timed action.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="TIMED_ACTION"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="WorkItemEventType">
		<xsd:annotation>
			<xsd:documentation>
				Process event related to a specific work item.
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tns:WfProcessEventType">
				<xsd:sequence>
					<xsd:element name="workItemId" type="xsd:string" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								ID of the work item (activiti task) this event is related to. May be empty for events
								not related to any work item, e.g. some kinds of automated approvals.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="originalAssigneeRef" type="c:ObjectReferenceType" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								User to which this work item was originally assigned.
							</xsd:documentation>
							<xsd:appinfo>
								<a:objectReferenceTargetType>tns:UserType</a:objectReferenceTargetType>
								<a:since>3.6</a:since>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="escalationLevelNumber" type="xsd:int" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Escalation level number (if applicable). Zero or null means no escalation.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="escalationLevelName" type="xsd:string" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Escalation level name (if applicable).
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="escalationLevelDisplayName" type="xsd:string" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Escalation level display name (if applicable).
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="cause" type="tns:WorkItemEventCauseInformationType" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Cause of the event occurring. E.g. user action, timed action (and which one).
								EXPERIMENTAL; TO BE DECIDED ABOUT THIS BEFORE 3.6 RELEASE
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<!-- TODO reason? e.g. when doing escalation? -->
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="WorkItemCompletionEventType">
		<xsd:annotation>
			<xsd:documentation>
				Event describing the work item completion.
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tns:WorkItemEventType">
				<xsd:sequence>
					<xsd:element name="result" type="tns:WorkItemResultType" minOccurs="0" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="WorkItemDelegationEventType">
		<xsd:annotation>
			<xsd:documentation>
				Event describing the fact of delegation.
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tns:WorkItemEventType">
				<xsd:sequence>
					<xsd:element name="assigneeBefore" type="tns:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element name="delegatedTo" type="tns:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded"/>
					<xsd:element name="delegationMethod" type="tns:WorkItemDelegationMethodType" minOccurs="0" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="WorkItemEscalationEventType">
		<xsd:annotation>
			<xsd:documentation>
				Event describing the fact of escalation.
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tns:WorkItemDelegationEventType">
				<xsd:sequence>
					<xsd:element name="newEscalationLevelNumber" type="xsd:int" />
					<xsd:element name="newEscalationLevelName" type="xsd:string" minOccurs="0" />
					<xsd:element name="newEscalationLevelDisplayName" type="xsd:string" minOccurs="0" />
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="WfStageCompletionEventType">
		<xsd:annotation>
			<xsd:documentation>
				Event describing the completion of a workflow process instance stage.
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tns:WfProcessEventType">
				<xsd:sequence>
					<xsd:element name="outcome" type="tns:ApprovalLevelOutcomeType" minOccurs="0" />
					<xsd:element name="automatedDecisionReason" type="tns:AutomatedDecisionReasonType" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Reason for automated decision, if applicable.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="WfProcessCompletionEventType">
		<xsd:annotation>
			<xsd:documentation>
				Event describing the completion of a workflow process instance.
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tns:WfProcessEventType">
				<xsd:sequence>
					<!-- TODO -->
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="WfProcessCreationEventType">
		<xsd:annotation>
			<xsd:documentation>
				Event describing the creation of a workflow process instance.
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tns:WfProcessEventType">
				<xsd:sequence>
					<xsd:element name="businessContext" type="tns:OperationBusinessContextType" minOccurs="0">
						<xsd:annotation>
							<xsd:documentation>
								Business context of the operation, if provided.
								TODO move to WfProcessEventType?
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="DecisionType">
        <xsd:annotation>
            <xsd:documentation>
                Basic information on a user (or automated) decision in context of a work item.

                This structure is meant to describe the outcome of a work items in various contexts,
                although currently it is used only within the generalized item approval process.

	            DEPRECATED. Use WorkItemCompletionEventType (or other kinds of wf events) instead.
            </xsd:documentation>
	        <xsd:appinfo>
		        <a:deprecated>true</a:deprecated>
		        <a:deprecatedSince>3.6</a:deprecatedSince>
	        </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="approverRef" type="c:ObjectReferenceType">
                <xsd:annotation>
					<xsd:documentation>
						User who actually decided on this work item. May be empty in the case of automated decision.
					</xsd:documentation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>tns:UserType</a:objectReferenceTargetType>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="approved" type="xsd:boolean" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Boolean representation of the decision, if applicable.
                        True = approved, false = rejected, null = either unknown or not applicable.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="resultAsString" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        String representation of the result. Used in cases where the result is not simple 'approved' or 'rejected'.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="comment" type="xsd:string" minOccurs="0"/>
            <xsd:element name="dateTime" type="xsd:dateTime" />
		</xsd:sequence>
    </xsd:complexType>
    <xsd:element name="decisionType" type="tns:DecisionType" />

	<xsd:simpleType name="AutomatedDecisionReasonType">
		<xsd:annotation>
			<xsd:documentation>
				Reason for automated decision.
			</xsd:documentation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="autoCompletionCondition">
				<xsd:annotation>
					<xsd:documentation>
						Completed automatically by the auto-completion or auto-approval condition.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="AUTO_COMPLETION_CONDITION"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="noApproversFound">
				<xsd:annotation>
					<xsd:documentation>
						Approved/rejected automatically because there were no approvers found.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="NO_APPROVERS_FOUND"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

    <xsd:complexType name="WfProcessorSpecificStateType">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
            <xsd:documentation>
                Describes states that are specific to a given change processor.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:complexType>
    <xsd:element name="wfProcessorSpecificStateType" type="tns:WfProcessorSpecificStateType" />

    <xsd:complexType name="WfPrimaryChangeProcessorStateType">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
            <xsd:documentation>
                TODO
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:WfProcessorSpecificStateType">
                <xsd:sequence>
                    <xsd:element name="changeAspect" type="xsd:string"/>
                    <xsd:element name="deltasToProcess" type="tns:ObjectTreeDeltasType" minOccurs="0"/>
                    <xsd:element name="resultingDeltas" type="tns:ObjectTreeDeltasType" minOccurs="0"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="wfPrimaryChangeProcessorStateType" type="tns:WfPrimaryChangeProcessorStateType" />

    <xsd:complexType name="WfGeneralChangeProcessorStateType">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
            <xsd:documentation>
                TODO
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:WfProcessorSpecificStateType">
                <xsd:sequence>
                    <xsd:element name="scenario" type="xsd:string"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="wfGeneralChangeProcessorStateType" type="tns:WfGeneralChangeProcessorStateType" />

    <xsd:complexType name="WfProcessSpecificWorkItemPartType">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
            <xsd:documentation>
                Describe work item parts that are specific to a given BPMN process.
            </xsd:documentation>
        </xsd:annotation>
    </xsd:complexType>
    <xsd:element name="wfProcessSpecificWorkItemPart" type="tns:WfProcessSpecificWorkItemPartType" />

    <xsd:complexType name="ItemApprovalWorkItemPartType">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
            <xsd:documentation>
                TODO
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tns:WfProcessSpecificWorkItemPartType">
                <xsd:sequence>
                    <!-- TODO -->
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:element name="itemApprovalWorkItemPart" type="tns:ItemApprovalWorkItemPartType" />

	<xsd:complexType name="WfProcessSpecificStateType">
		<xsd:annotation>
			<xsd:appinfo>
				<a:container/>
			</xsd:appinfo>
			<xsd:documentation>
				Describe states that are specific to a given BPMN process.
			</xsd:documentation>
		</xsd:annotation>
	</xsd:complexType>
	<xsd:element name="wfProcessSpecificState" type="tns:WfProcessSpecificStateType" />

	<xsd:complexType name="ItemApprovalProcessStateType">
		<xsd:annotation>
			<xsd:appinfo>
				<a:container/>
			</xsd:appinfo>
			<xsd:documentation>
				TODO
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="tns:WfProcessSpecificStateType">
				<xsd:sequence>
					<xsd:element name="approvalSchema" type="tns:ApprovalSchemaType"/>
					<xsd:element name="policyRules" type="tns:SchemaAttachedPolicyRulesType"/>
					<xsd:element name="decisions" type="c:DecisionType" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:appinfo>
								<a:deprecated>true</a:deprecated>
								<a:deprecatedSince>3.6</a:deprecatedSince>
							</xsd:appinfo>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:element name="itemApprovalProcessState" type="tns:ItemApprovalProcessStateType" />

	<xsd:complexType name="ItemApprovalRequestType">
        <xsd:annotation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
            <xsd:documentation>
                TODO
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="itemToApprove" type="xsd:anyType"/>          <!-- Containerable -->
            <xsd:element name="approvalSchema" type="c:ApprovalSchemaType" minOccurs="0" />
        </xsd:sequence>
    </xsd:complexType>
    <xsd:element name="itemApprovalRequest" type="tns:ItemApprovalRequestType" />

    <xsd:complexType name="WorkItemType">
        <xsd:annotation>
            <xsd:documentation>
                WorkItemType contains information about a human task (or a notification).
            </xsd:documentation>
            <xsd:appinfo>
                <a:container/>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="workItemId" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        Internal identifier of a work item, assigned by the underlying workflow engine
                        (currently Activiti). MidPoint WorkItem is Activiti Task. So workItemId is
                        taskId.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="processInstanceId" type="xsd:string" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Internal identifier of a process instance, assigned by the underlying workflow engine
                        (currently Activiti).
                    </xsd:documentation>
					<xsd:appinfo>
						<a:since>3.6</a:since>
					</xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="name" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation>
                        Descriptive name of the work item. E.g. "Assign role1 to user1".
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="processStartedTimestamp" type="xsd:dateTime">
                <xsd:annotation>
                    <xsd:documentation>
                        When was the operation requested, i.e. when the approval process started?

                        (Normally, this information is relevant at the task/wf-process level.
                        However we put it here to avoid fetching tasks when we want to display
                        work item list only.)
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="workItemCreatedTimestamp" type="xsd:dateTime">
                <xsd:annotation>
                    <xsd:documentation>
                        When was this work item created?
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="deadline" type="xsd:dateTime">
                <xsd:annotation>
                    <xsd:documentation>
                        When is this work to be done? May be moved via escalation(s).
                    </xsd:documentation>
					<xsd:appinfo>
						<a:since>3.6</a:since>
					</xsd:appinfo>
				</xsd:annotation>
            </xsd:element>
			<!-- TODO original deadline? -->
            <xsd:element name="taskRef" type="c:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Task that wraps process instance this work item is part of.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>tns:TaskType</a:objectReferenceTargetType>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="assigneeRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Users to which the work item is assigned. Other users do not see such a work item in their work lists.
						Normally the work item is assigned to a single user. However, when delegating (directly or via escalation)
						more assignees could be added.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>tns:UserType</a:objectReferenceTargetType>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="originalAssigneeRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        Users to which the work item was originally assigned.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>tns:UserType</a:objectReferenceTargetType>
						<a:since>3.6</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="candidateRef" type="c:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        Users and abstract roles to which the work item MAY BE assigned.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>tns:FocusType</a:objectReferenceTargetType>
						<a:since>3.6</a:since>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="objectRef" type="c:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Object that is being modified (added, deleted) by the operation requested.
                        Typically a user, but might be also a role, org, resource, etc.

                        (Normally, this information is relevant at the task/wf-process level.
                        However we put it here to avoid fetching tasks when we want to display
                        work item list only.)
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>tns:ObjectType</a:objectReferenceTargetType>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="targetRef" type="c:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Object that is being attached to/detached from the object modified.
                        Typically a role but might be also a resource, org, ... or it might be null.

                        (Normally, this information is relevant at the task/wf-process level.
                        However we put it here to avoid fetching tasks when we want to display
                        work item list only.)
                    </xsd:documentation>
                    <xsd:appinfo>
                        <a:objectReferenceTargetType>tns:ObjectType</a:objectReferenceTargetType>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="result" type="tns:WorkItemResultType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Result of this work item (null if it was not completed).
                    </xsd:documentation>
	                <xsd:appinfo>
						<a:since>3.6</a:since>
	                </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
            <xsd:element name="completedByRef" type="tns:ObjectReferenceType" minOccurs="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Who has completed this work item (null if unknown, not completed or completed automatically).
                    </xsd:documentation>
	                <xsd:appinfo>
						<a:since>3.6</a:since>
	                </xsd:appinfo>
                </xsd:annotation>
            </xsd:element>
			<xsd:element name="additionalInformation" type="tns:InformationType" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>
						Information to be shown to the approver.
					</xsd:documentation>
					<xsd:appinfo>
						<a:since>3.6</a:since>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:element>
            <!-- for work items without TaskType information -->
			<xsd:element name="stageNumber" type="xsd:int" minOccurs="0" />
			<xsd:element name="stageCount" type="xsd:int" minOccurs="0" />
			<xsd:element name="stageName" type="xsd:string" minOccurs="0" />
			<xsd:element name="stageDisplayName" type="xsd:string" minOccurs="0" />
			<xsd:element name="escalationLevelNumber" type="xsd:int" minOccurs="0" />
			<xsd:element name="escalationLevelName" type="xsd:string" minOccurs="0" />
			<xsd:element name="escalationLevelDisplayName" type="xsd:string" minOccurs="0" />
			<xsd:element name="processSpecificPart" type="tns:WfProcessSpecificWorkItemPartType" minOccurs="0" />
        </xsd:sequence>
    </xsd:complexType>

    <xsd:element name="workItem" type="tns:WorkItemType" />

    <xsd:complexType name="InformationType">
		<xsd:annotation>
			<xsd:documentation>
				TODO Replace by forms before 3.6 release.
				TEMPORARY
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="order" type="xsd:int" minOccurs="0" />
			<xsd:element name="title" type="xsd:string" minOccurs="0" />
			<xsd:element name="part" type="tns:InformationPartType" minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
    </xsd:complexType>

	<xsd:complexType name="InformationPartType">
		<xsd:annotation>
			<xsd:documentation>
				TODO Replace by forms before 3.6 release.
				TEMPORARY
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="text" type="xsd:string" minOccurs="0" />
			<xsd:element name="hasMarkup" type="xsd:boolean" minOccurs="0" />
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="SchemaAttachedPolicyRulesType">
		<xsd:annotation>
			<xsd:documentation>
				Why was this process started? For processes based on policy rules we define it via relevant policy rules.
				(For legacy processes we don't provide this kind of information.)

				EXPERIMENTAL
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="entry" type="tns:SchemaAttachedPolicyRuleType" minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="SchemaAttachedPolicyRuleType">
		<xsd:annotation>
			<xsd:documentation>
				TODO

				Note that the rule should be triggered. All irrelevant (non-approval) action types should be removed.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="levelMin" type="xsd:int" minOccurs="0"/>
			<xsd:element name="levelMax" type="xsd:int" minOccurs="0"/>
			<xsd:element name="rule" type="tns:EvaluatedPolicyRuleType" minOccurs="0" />
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="WfTimeSpecificationType">
		<xsd:annotation>
			<xsd:documentation>
				TODO
				EXPERIMENTAL

				By default (when the base is not specified), positive time intervals are meant "after work item start".
				Negative time intervals are meant "before work item deadline".
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="value" type="xsd:duration" minOccurs="0" maxOccurs="unbounded" />
			<!-- TODO other time units, like business days? -->
			<xsd:element name="base" type="tns:WfTimeBaseType" minOccurs="0" />
		</xsd:sequence>
	</xsd:complexType>

	<xsd:simpleType name="WfTimeBaseType">
		<xsd:annotation>
			<xsd:documentation>
				TODO
			</xsd:documentation>
			<xsd:appinfo>
				<jaxb:typesafeEnumClass/>
				<a:since>3.6</a:since>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="deadline">
				<xsd:annotation>
					<xsd:documentation>
						Time will be taken relative to the deadline. (This is the default for zero or negative values.)
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="DEADLINE"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="workItemCreation">
				<xsd:annotation>
					<xsd:documentation>
						Time will be taken relative to the work item creation timestamp. (This is the default for positive values.)
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="WORK_ITEM_CREATION"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<!-- TODO process instance creation -->
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="WorkItemOperationKindType">
		<xsd:annotation>
			<xsd:documentation>
				Kind of operation.
			</xsd:documentation>
			<xsd:appinfo>
				<a:since>3.6</a:since>
				<jaxb:typesafeEnumClass/>
			</xsd:appinfo>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="complete">
				<xsd:annotation>
					<xsd:documentation>
						Complete (approve/reject) operation. (Explicit or automated.)
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="COMPLETE"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="delegate">
				<xsd:annotation>
					<xsd:documentation>
						Delegate operation. (Explicit or automated.)
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="DELEGATE"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="escalate">
				<xsd:annotation>
					<xsd:documentation>
						Escalate operation. (Explicit or automated.)
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="ESCALATE"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="claim">
				<xsd:annotation>
					<xsd:documentation>
						Claim operation.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="CLAIM"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="release">
				<xsd:annotation>
					<xsd:documentation>
						Claim operation.
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="RELEASE"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="cancel">
				<xsd:annotation>
					<xsd:documentation>
						Cancel operation. Work item was cancelled as a result of other action. (E.g. another work item
						was completed, resulting in process or stage completion. Or the process was cancelled/deleted
						externally.)
					</xsd:documentation>
					<xsd:appinfo>
						<jaxb:typesafeEnumMember name="CANCEL"/>
					</xsd:appinfo>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

</xsd:schema>
